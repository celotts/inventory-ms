#------------------------------------------------------------------------
# üì¶ Variables de entorno
#------------------------------------------------------------------------
ENV_FILE_LOCAL ?= .env.local
ENV_FILE_DEV ?= .env.dev
ENV_FILE_PROD ?= .env.prod

#------------------------------------------------------------------------
# üßë‚Äçüíª Funciones de desarrollo LOCAL (sin Docker)
#------------------------------------------------------------------------
validate-product: ## ‚úÖ Valida la compilaci√≥n y tests de product-service (sin Docker)
	cd .. && ./gradlew :product-service:build

validate-product-no-tests: ## ‚úÖ Valida product-service sin ejecutar pruebas
	cd .. && ./gradlew :product-service:build -x test

clean-gradle: ## üßπ Limpia cach√© y compilaci√≥n de Gradle
	cd .. && ./gradlew clean

#------------------------------------------------------------------------
# üê≥ Funciones que USAN Docker Compose
#------------------------------------------------------------------------

## üîΩ Infraestructura por entorno
up-local: ## üß™ Levanta infra para trabajar desde IntelliJ
	cp $(ENV_FILE_LOCAL) .env.override
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) down -v
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) up --build

down-local: ## üîª Apaga infra local
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) down -v

up-dev: ## üß™ Levanta todo el stack en contenedores (modo dev)
	cp $(ENV_FILE_DEV) .env.override
	docker compose down -v
	docker compose --env-file $(ENV_FILE_DEV) up --build

up-prod: ## üöÄ Levanta todo en entorno de producci√≥n
	cp $(ENV_FILE_PROD) .env.override
	docker compose -f docker-compose.yml --env-file $(ENV_FILE_PROD) down -v
	docker compose -f docker-compose.yml --env-file $(ENV_FILE_PROD) up --build

up-db: ## üîÑ Levanta solo la base de datos para desarrollo local
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) up -d product-db

## üîÅ Build y Rebuild
build-images: ## üèóÔ∏è Build manual de im√°genes
	docker build -t inventory/discovery-service ../discovery-service
	docker build -t inventory/config-service ../config-service
	docker build -t inventory/product-service ../product-service

build-jars:
	cd .. && ./gradlew --console=plain :config-service:bootJar :discovery-service:bootJar :product-service:bootJar

rebuild-config-service-local: ## üîÅ Reconstruye solo config-service (local)
	@echo "üõ†Ô∏è  Reconstruyendo config-service con env: $(ENV_FILE_LOCAL)"
	cp $(ENV_FILE_LOCAL) .env.override
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) build config-service
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) up -d config-service

rebuild-discovery-local: ## üîÅ Reconstruye solo discovery-service (local)
	@echo "üõ†Ô∏è  Reconstruyendo discovery-service con env: $(ENV_FILE_LOCAL)"
	cp $(ENV_FILE_LOCAL) .env.override
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) build discovery-service
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) up -d discovery-service

rebuild-product-local: ## üîÅ Reconstruye solo product-service (local)
	@echo "üõ†Ô∏è  Reconstruyendo product-service con env: $(ENV_FILE_LOCAL)"
	cp $(ENV_FILE_LOCAL) .env.override
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) build product-service
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) up -d product-service

rebuild-product-dev: ## üîÅ Reconstruye solo product-service (dev)
	@echo "üõ†Ô∏è  Reconstruyendo product-service con env: $(ENV_FILE_DEV)"
	cp $(ENV_FILE_DEV) .env.override
	docker compose -f docker-compose.yml --env-file $(ENV_FILE_DEV) build product-service
	docker compose -f docker-compose.yml --env-file $(ENV_FILE_DEV) up -d product-service

## ‚ôªÔ∏è Mantenimiento y limpieza
clean-volumes: ## üßπ Limpia vol√∫menes no usados
	docker volume prune -f

clean-images: ## üßπ Limpia im√°genes sin contenedor
	docker image prune -a -f

clean-docker: ## üßπ Limpia im√°genes sin contenedor y vol√∫menes
	$(MAKE) clean-images
	$(MAKE) clean-volumes

stop-all: ## üõë Detiene todos los contenedores activos en Docker
	@echo "üõë Deteniendo todos los contenedores..."
	docker ps -q | xargs -r docker stop
	docker system prune -f --volumes

reset-db: ## üß® Reinicia product-db con script inicial
	@echo "‚õî Eliminando contenedor y volumen de product-db..."
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) down -v --remove-orphans
	@echo "üöÄ Levantando product-db..."
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) up --build -d product-db
	@echo "üìã Mostrando logs..."
	docker logs -f product-db

reset-local: ## üîÅ Reinicia completamente el entorno local
	$(MAKE) down-local
	$(MAKE) clean-docker
	$(MAKE) up-local

reload-schema: ## ‚ôªÔ∏è Ejecuta el script SQL en product-db
	docker cp ./init-scripts/product-init.sql product-db:/tmp/product-init.sql
	docker exec -it product-db psql -U product -d product -f /tmp/product-init.sql

## üîç Logs y verificaci√≥n
logs-local: ## üìú Logs de todos los servicios locales
	docker compose -f docker-compose-local.yml --env-file $(ENV_FILE_LOCAL) logs -f

logs-dev: ## üìú Logs del entorno dev
	docker compose -f docker-compose.yml --env-file $(ENV_FILE_DEV) logs -f

check-db-init: ## üîé Verifica existencia del volumen product-db
	@echo "üîé Verificando volumen de la base de datos..."
	@if ! docker volume inspect inventoryms_product-data >/dev/null 2>&1; then \
		echo "‚úÖ Volumen no existe. Se ejecutar√° el script SQL al levantar PostgreSQL."; \
	else \
		echo "‚ö†Ô∏è Volumen ya existe. PostgreSQL NO ejecutar√° el script de inicializaci√≥n."; \
	fi
	@$(MAKE) up-local