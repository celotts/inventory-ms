services:
  discovery-service:
    build:
      context: ../discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "${DISCOVERY_PORT}:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
    healthcheck:
      test: ["CMD-SHELL", "curl -f ${DISCOVERY_SERVICE_HEALTH_URL} || exit 1"]
      interval: ${INTERVAL10s}
      timeout: ${TIMEOUT5s}
      retries: ${RETRIES3}
    networks:
      - inventory-network

  config-service:
    build:
      context: ../config-service
      dockerfile: Dockerfile
    container_name: config-service
    ports:
      - "${CONFIG_PORT}:${CONFIG_PORT}"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DISCOVERY_SERVICE_HEALTH_URL=${DISCOVERY_SERVICE_HEALTH_URL}
      - JAVA_OPTS=${JAVA_OPTS}
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/celotts/config-repo.git
      - GIT_USERNAME=${GIT_USERNAME}
      - GIT_TOKEN=${GIT_TOKEN}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      discovery-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f ${CONFIG_SERVICE_HEALTH_URL} || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - inventory-network

  # üåê API Gateway - Punto de entrada principal
  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "${GATEWAY_PORT:-8080}:8080"  # Puerto principal de entrada
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=${SPRING_CONFIG_IMPORT_VALUE}
      # Configuraciones adicionales para Gateway
      - SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED=true
      - SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWERCASESERVICEID=true
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: ${INTERVAL30s}
      timeout: ${TIMEOUT10s}
      retries: ${RETRIES5}
    networks:
      - inventory-network

  product-service:
    build:
      context: ../product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "${PORT9090}:${PORT9090}"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - JAVA_OPTS=${JAVA_OPTS}
      - SPRING_DATASOURCE_URL=${URL_DATASOURCE_PRODUCT}
      - SPRING_DATASOURCE_USERNAME=${PRODUCT_DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${PRODUCT_DB_PASSWORD}
      - SPRING_CONFIG_IMPORT=${SPRING_CONFIG_IMPORT_VALUE}
      - PAGINATION_DEFAULT_PAGE=${PAGINATION_DEFAULT_PAGE:-0}
      - PAGINATION_DEFAULT_SIZE=${PAGINATION_DEFAULT_SIZE:-10}
      - PAGINATION_MAX_SIZE=${PAGINATION_MAX_SIZE:-100}
      - PAGINATION_DEFAULT_SORT_BY=${PAGINATION_DEFAULT_SORT_BY:-createdAt}
      - PAGINATION_DEFAULT_SORT_DIR=${PAGINATION_DEFAULT_SORT_DIR:-desc}
      - PAGINATION_ALLOWED_SORT_FIELDS=${PAGINATION_ALLOWED_SORT_FIELDS:-createdAt,updatedAt,code,description,unitPrice,currentStock}
      # Configuraci√≥n para registrarse en Eureka
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      api-gateway:
        condition: service_healthy  # Ahora depende del Gateway
      product-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f $PRODUCT_HEALTHCHECK_URL_LOCAL || exit 1" ]
      interval: ${INTERVAL30s}
      timeout: ${TIMEOUT10s}
      retries: ${RETRIES5}
    networks:
      - inventory-network

  product-db:
    image: postgres:16
    container_name: product-db
    ports:
      - "${PORT_5432}:${PORT_5432}"
    environment:
      POSTGRES_DB: ${PRODUCT_DB_NAME}
      POSTGRES_USER: ${PRODUCT_DB_USERNAME}
      POSTGRES_PASSWORD: ${PRODUCT_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U product" ]
      interval: ${INTERVAL10s}
      timeout: ${TIMEOUT5s}
      retries: ${RETRIES5}
    networks:
      - inventory-network
    env_file:
      - .env.local
    volumes:
      - ./init-scripts/product/01-product-init.sql:/docker-entrypoint-initdb.d/01-product-init.sql
      - product-data:/var/lib/postgresql/data

networks:
  inventory-network:
    driver: bridge

volumes:
  product-data: